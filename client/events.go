// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package client

import (
	"encoding/base64"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_rpc "github.com/gagliardetto/solana-go/rpc"
	ag_base58 "github.com/mr-tron/base58"
	"reflect"
	"strings"
)

type ClaimRentalFeeEventEventData struct {
	Provider   ag_solanago.PublicKey
	Controller ag_solanago.PublicKey
	Amount     uint64
}

var ClaimRentalFeeEventEventDataDiscriminator = [8]byte{233, 172, 46, 252, 236, 68, 236, 26}

func (obj ClaimRentalFeeEventEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ClaimRentalFeeEventEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Provider` param:
	err = encoder.Encode(obj.Provider)
	if err != nil {
		return err
	}
	// Serialize `Controller` param:
	err = encoder.Encode(obj.Controller)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimRentalFeeEventEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ClaimRentalFeeEventEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[233 172 46 252 236 68 236 26]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Provider`:
	err = decoder.Decode(&obj.Provider)
	if err != nil {
		return err
	}
	// Deserialize `Controller`:
	err = decoder.Decode(&obj.Controller)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (*ClaimRentalFeeEventEventData) isEventData() {}

type DeviceKValueUpdatedEventData struct {
	SpecId uint16
	Old    uint64
	New    uint64
	Admin  ag_solanago.PublicKey
}

var DeviceKValueUpdatedEventDataDiscriminator = [8]byte{145, 201, 163, 41, 27, 221, 84, 22}

func (obj DeviceKValueUpdatedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(DeviceKValueUpdatedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `SpecId` param:
	err = encoder.Encode(obj.SpecId)
	if err != nil {
		return err
	}
	// Serialize `Old` param:
	err = encoder.Encode(obj.Old)
	if err != nil {
		return err
	}
	// Serialize `New` param:
	err = encoder.Encode(obj.New)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DeviceKValueUpdatedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(DeviceKValueUpdatedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[145 201 163 41 27 221 84 22]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `SpecId`:
	err = decoder.Decode(&obj.SpecId)
	if err != nil {
		return err
	}
	// Deserialize `Old`:
	err = decoder.Decode(&obj.Old)
	if err != nil {
		return err
	}
	// Deserialize `New`:
	err = decoder.Decode(&obj.New)
	if err != nil {
		return err
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	return nil
}

func (*DeviceKValueUpdatedEventData) isEventData() {}

type DeviceStakedEventEventData struct {
	Provider ag_solanago.PublicKey
	DeviceId uint64
	SpecId   uint64
	Amount   uint64
}

var DeviceStakedEventEventDataDiscriminator = [8]byte{167, 219, 80, 186, 13, 21, 172, 123}

func (obj DeviceStakedEventEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(DeviceStakedEventEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Provider` param:
	err = encoder.Encode(obj.Provider)
	if err != nil {
		return err
	}
	// Serialize `DeviceId` param:
	err = encoder.Encode(obj.DeviceId)
	if err != nil {
		return err
	}
	// Serialize `SpecId` param:
	err = encoder.Encode(obj.SpecId)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DeviceStakedEventEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(DeviceStakedEventEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[167 219 80 186 13 21 172 123]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Provider`:
	err = decoder.Decode(&obj.Provider)
	if err != nil {
		return err
	}
	// Deserialize `DeviceId`:
	err = decoder.Decode(&obj.DeviceId)
	if err != nil {
		return err
	}
	// Deserialize `SpecId`:
	err = decoder.Decode(&obj.SpecId)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (*DeviceStakedEventEventData) isEventData() {}

type DeviceUnstakeEventEventData struct {
	Provider               ag_solanago.PublicKey
	DeviceId               uint64
	Amount                 uint64
	ProviderVestingInfoKey ag_solanago.PublicKey
}

var DeviceUnstakeEventEventDataDiscriminator = [8]byte{219, 57, 57, 40, 225, 213, 205, 161}

func (obj DeviceUnstakeEventEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(DeviceUnstakeEventEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Provider` param:
	err = encoder.Encode(obj.Provider)
	if err != nil {
		return err
	}
	// Serialize `DeviceId` param:
	err = encoder.Encode(obj.DeviceId)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `ProviderVestingInfoKey` param:
	err = encoder.Encode(obj.ProviderVestingInfoKey)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DeviceUnstakeEventEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(DeviceUnstakeEventEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[219 57 57 40 225 213 205 161]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Provider`:
	err = decoder.Decode(&obj.Provider)
	if err != nil {
		return err
	}
	// Deserialize `DeviceId`:
	err = decoder.Decode(&obj.DeviceId)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `ProviderVestingInfoKey`:
	err = decoder.Decode(&obj.ProviderVestingInfoKey)
	if err != nil {
		return err
	}
	return nil
}

func (*DeviceUnstakeEventEventData) isEventData() {}

type PayRentalEventEventData struct {
	Tenant ag_solanago.PublicKey
	Amount uint64
}

var PayRentalEventEventDataDiscriminator = [8]byte{226, 244, 245, 60, 4, 57, 138, 93}

func (obj PayRentalEventEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PayRentalEventEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Tenant` param:
	err = encoder.Encode(obj.Tenant)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PayRentalEventEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PayRentalEventEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[226 244 245 60 4 57 138 93]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Tenant`:
	err = decoder.Decode(&obj.Tenant)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (*PayRentalEventEventData) isEventData() {}

type ProviderControllerChangedEventEventData struct {
	Provider      ag_solanago.PublicKey
	Action        string
	NewController ag_solanago.PublicKey
	Operator      ag_solanago.PublicKey
	OldController ag_solanago.PublicKey
}

var ProviderControllerChangedEventEventDataDiscriminator = [8]byte{216, 183, 242, 141, 71, 46, 230, 182}

func (obj ProviderControllerChangedEventEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ProviderControllerChangedEventEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Provider` param:
	err = encoder.Encode(obj.Provider)
	if err != nil {
		return err
	}
	// Serialize `Action` param:
	err = encoder.Encode(obj.Action)
	if err != nil {
		return err
	}
	// Serialize `NewController` param:
	err = encoder.Encode(obj.NewController)
	if err != nil {
		return err
	}
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	// Serialize `OldController` param:
	err = encoder.Encode(obj.OldController)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProviderControllerChangedEventEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ProviderControllerChangedEventEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[216 183 242 141 71 46 230 182]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Provider`:
	err = decoder.Decode(&obj.Provider)
	if err != nil {
		return err
	}
	// Deserialize `Action`:
	err = decoder.Decode(&obj.Action)
	if err != nil {
		return err
	}
	// Deserialize `NewController`:
	err = decoder.Decode(&obj.NewController)
	if err != nil {
		return err
	}
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	// Deserialize `OldController`:
	err = decoder.Decode(&obj.OldController)
	if err != nil {
		return err
	}
	return nil
}

func (*ProviderControllerChangedEventEventData) isEventData() {}

type RewardClaimedEventEventData struct {
	Provider ag_solanago.PublicKey
	Amount   uint64
}

var RewardClaimedEventEventDataDiscriminator = [8]byte{246, 43, 215, 228, 82, 49, 230, 56}

func (obj RewardClaimedEventEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(RewardClaimedEventEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Provider` param:
	err = encoder.Encode(obj.Provider)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardClaimedEventEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(RewardClaimedEventEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[246 43 215 228 82 49 230 56]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Provider`:
	err = decoder.Decode(&obj.Provider)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (*RewardClaimedEventEventData) isEventData() {}

type RewardLockedTimeUpdatedEventData struct {
	Old   uint64
	New   uint64
	Admin ag_solanago.PublicKey
}

var RewardLockedTimeUpdatedEventDataDiscriminator = [8]byte{37, 131, 22, 147, 118, 100, 143, 26}

func (obj RewardLockedTimeUpdatedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(RewardLockedTimeUpdatedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Old` param:
	err = encoder.Encode(obj.Old)
	if err != nil {
		return err
	}
	// Serialize `New` param:
	err = encoder.Encode(obj.New)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardLockedTimeUpdatedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(RewardLockedTimeUpdatedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[37 131 22 147 118 100 143 26]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Old`:
	err = decoder.Decode(&obj.Old)
	if err != nil {
		return err
	}
	// Deserialize `New`:
	err = decoder.Decode(&obj.New)
	if err != nil {
		return err
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	return nil
}

func (*RewardLockedTimeUpdatedEventData) isEventData() {}

type StakingCoefficientUpdatedEventData struct {
	Old   uint64
	New   uint64
	Admin ag_solanago.PublicKey
}

var StakingCoefficientUpdatedEventDataDiscriminator = [8]byte{11, 31, 245, 203, 59, 83, 112, 36}

func (obj StakingCoefficientUpdatedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StakingCoefficientUpdatedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Old` param:
	err = encoder.Encode(obj.Old)
	if err != nil {
		return err
	}
	// Serialize `New` param:
	err = encoder.Encode(obj.New)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StakingCoefficientUpdatedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StakingCoefficientUpdatedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[11 31 245 203 59 83 112 36]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Old`:
	err = decoder.Decode(&obj.Old)
	if err != nil {
		return err
	}
	// Deserialize `New`:
	err = decoder.Decode(&obj.New)
	if err != nil {
		return err
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	return nil
}

func (*StakingCoefficientUpdatedEventData) isEventData() {}

type TokenReleasedEventEventData struct {
	Controller ag_solanago.PublicKey
	Provider   ag_solanago.PublicKey
	Amount     uint64
}

var TokenReleasedEventEventDataDiscriminator = [8]byte{166, 215, 137, 155, 84, 0, 149, 214}

func (obj TokenReleasedEventEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TokenReleasedEventEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Controller` param:
	err = encoder.Encode(obj.Controller)
	if err != nil {
		return err
	}
	// Serialize `Provider` param:
	err = encoder.Encode(obj.Provider)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenReleasedEventEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TokenReleasedEventEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[166 215 137 155 84 0 149 214]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Controller`:
	err = decoder.Decode(&obj.Controller)
	if err != nil {
		return err
	}
	// Deserialize `Provider`:
	err = decoder.Decode(&obj.Provider)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (*TokenReleasedEventEventData) isEventData() {}

type VestingScheduledEventEventData struct {
	Provider ag_solanago.PublicKey
	Day      uint16
	Amount   uint64
}

var VestingScheduledEventEventDataDiscriminator = [8]byte{139, 64, 225, 127, 141, 206, 190, 86}

func (obj VestingScheduledEventEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(VestingScheduledEventEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Provider` param:
	err = encoder.Encode(obj.Provider)
	if err != nil {
		return err
	}
	// Serialize `Day` param:
	err = encoder.Encode(obj.Day)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VestingScheduledEventEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(VestingScheduledEventEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[139 64 225 127 141 206 190 86]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Provider`:
	err = decoder.Decode(&obj.Provider)
	if err != nil {
		return err
	}
	// Deserialize `Day`:
	err = decoder.Decode(&obj.Day)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (*VestingScheduledEventEventData) isEventData() {}

type WithdrawEventEventData struct {
	Tenant ag_solanago.PublicKey
	Amount uint64
}

var WithdrawEventEventDataDiscriminator = [8]byte{22, 9, 133, 26, 160, 44, 71, 192}

func (obj WithdrawEventEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(WithdrawEventEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Tenant` param:
	err = encoder.Encode(obj.Tenant)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WithdrawEventEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(WithdrawEventEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[22 9 133 26 160 44 71 192]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Tenant`:
	err = decoder.Decode(&obj.Tenant)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (*WithdrawEventEventData) isEventData() {}

var eventTypes = map[[8]byte]reflect.Type{
	ClaimRentalFeeEventEventDataDiscriminator:            reflect.TypeOf(ClaimRentalFeeEventEventData{}),
	DeviceKValueUpdatedEventDataDiscriminator:            reflect.TypeOf(DeviceKValueUpdatedEventData{}),
	DeviceStakedEventEventDataDiscriminator:              reflect.TypeOf(DeviceStakedEventEventData{}),
	DeviceUnstakeEventEventDataDiscriminator:             reflect.TypeOf(DeviceUnstakeEventEventData{}),
	PayRentalEventEventDataDiscriminator:                 reflect.TypeOf(PayRentalEventEventData{}),
	ProviderControllerChangedEventEventDataDiscriminator: reflect.TypeOf(ProviderControllerChangedEventEventData{}),
	RewardClaimedEventEventDataDiscriminator:             reflect.TypeOf(RewardClaimedEventEventData{}),
	RewardLockedTimeUpdatedEventDataDiscriminator:        reflect.TypeOf(RewardLockedTimeUpdatedEventData{}),
	StakingCoefficientUpdatedEventDataDiscriminator:      reflect.TypeOf(StakingCoefficientUpdatedEventData{}),
	TokenReleasedEventEventDataDiscriminator:             reflect.TypeOf(TokenReleasedEventEventData{}),
	VestingScheduledEventEventDataDiscriminator:          reflect.TypeOf(VestingScheduledEventEventData{}),
	WithdrawEventEventDataDiscriminator:                  reflect.TypeOf(WithdrawEventEventData{}),
}
var eventNames = map[[8]byte]string{
	ClaimRentalFeeEventEventDataDiscriminator:            "ClaimRentalFeeEvent",
	DeviceKValueUpdatedEventDataDiscriminator:            "DeviceKValueUpdated",
	DeviceStakedEventEventDataDiscriminator:              "DeviceStakedEvent",
	DeviceUnstakeEventEventDataDiscriminator:             "DeviceUnstakeEvent",
	PayRentalEventEventDataDiscriminator:                 "PayRentalEvent",
	ProviderControllerChangedEventEventDataDiscriminator: "ProviderControllerChangedEvent",
	RewardClaimedEventEventDataDiscriminator:             "RewardClaimedEvent",
	RewardLockedTimeUpdatedEventDataDiscriminator:        "RewardLockedTimeUpdated",
	StakingCoefficientUpdatedEventDataDiscriminator:      "StakingCoefficientUpdated",
	TokenReleasedEventEventDataDiscriminator:             "TokenReleasedEvent",
	VestingScheduledEventEventDataDiscriminator:          "VestingScheduledEvent",
	WithdrawEventEventDataDiscriminator:                  "WithdrawEvent",
}
var (
	_ *strings.Builder = nil
)
var (
	_ *base64.Encoding = nil
)
var (
	_ *ag_binary.Decoder = nil
)
var (
	_ *ag_rpc.GetTransactionResult = nil
)
var (
	_ *ag_base58.Alphabet = nil
)

type Event struct {
	Name string
	Data EventData
}

type EventData interface {
	UnmarshalWithDecoder(decoder *ag_binary.Decoder) error
	isEventData()
}

const eventLogPrefix = "Program data: "

func DecodeEvents(txData *ag_rpc.GetTransactionResult, targetProgramId ag_solanago.PublicKey, getAddressTables func(altAddresses []ag_solanago.PublicKey) (tables map[ag_solanago.PublicKey]ag_solanago.PublicKeySlice, err error)) (evts []*Event, err error) {
	var tx *ag_solanago.Transaction
	if tx, err = txData.Transaction.GetTransaction(); err != nil {
		return
	}

	altAddresses := make([]ag_solanago.PublicKey, len(tx.Message.AddressTableLookups))
	for i, alt := range tx.Message.AddressTableLookups {
		altAddresses[i] = alt.AccountKey
	}
	if len(altAddresses) > 0 {
		var tables map[ag_solanago.PublicKey]ag_solanago.PublicKeySlice
		if tables, err = getAddressTables(altAddresses); err != nil {
			return
		}
		tx.Message.SetAddressTables(tables)
		if err = tx.Message.ResolveLookups(); err != nil {
			return
		}
	}

	var base64Binaries [][]byte
	logMessageEventBinaries, err := decodeEventsFromLogMessage(txData.Meta.LogMessages)
	if err != nil {
		return
	}

	emitedCPIEventBinaries, err := decodeEventsFromEmitCPI(txData.Meta.InnerInstructions, tx.Message.AccountKeys, targetProgramId)
	if err != nil {
		return
	}

	base64Binaries = append(base64Binaries, logMessageEventBinaries...)
	base64Binaries = append(base64Binaries, emitedCPIEventBinaries...)
	evts, err = parseEvents(base64Binaries)
	return
}

func decodeEventsFromLogMessage(logMessages []string) (eventBinaries [][]byte, err error) {
	for _, log := range logMessages {
		if strings.HasPrefix(log, eventLogPrefix) {
			eventBase64 := log[len(eventLogPrefix):]

			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				err = fmt.Errorf("failed to decode logMessage event: %s", eventBase64)
				return
			}
			eventBinaries = append(eventBinaries, eventBinary)
		}
	}
	return
}

func decodeEventsFromEmitCPI(InnerInstructions []ag_rpc.InnerInstruction, accountKeys ag_solanago.PublicKeySlice, targetProgramId ag_solanago.PublicKey) (eventBinaries [][]byte, err error) {
	for _, parsedIx := range InnerInstructions {
		for _, ix := range parsedIx.Instructions {
			if accountKeys[ix.ProgramIDIndex] != targetProgramId {
				continue
			}

			var ixData []byte
			if ixData, err = ag_base58.Decode(ix.Data.String()); err != nil {
				return
			}
			eventBase64 := base64.StdEncoding.EncodeToString(ixData[8:])
			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				return
			}
			eventBinaries = append(eventBinaries, eventBinary)
		}
	}
	return
}

func parseEvents(base64Binaries [][]byte) (evts []*Event, err error) {
	decoder := ag_binary.NewDecoderWithEncoding(nil, ag_binary.EncodingBorsh)

	for _, eventBinary := range base64Binaries {
		eventDiscriminator := ag_binary.TypeID(eventBinary[:8])
		if eventType, ok := eventTypes[eventDiscriminator]; ok {
			eventData := reflect.New(eventType).Interface().(EventData)
			decoder.Reset(eventBinary)
			if err = eventData.UnmarshalWithDecoder(decoder); err != nil {
				err = fmt.Errorf("failed to unmarshal event %s: %w", eventType.String(), err)
				return
			}
			evts = append(evts, &Event{
				Name: eventNames[eventDiscriminator],
				Data: eventData,
			})
		}
	}
	return
}
