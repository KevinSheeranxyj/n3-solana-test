// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package client

import (
	"encoding/json"
	"errors"
	"fmt"
	ag_jsonrpc "github.com/gagliardetto/solana-go/rpc/jsonrpc"
)

var (
	_ *json.Encoder        = nil
	_ *ag_jsonrpc.RPCError = nil
	_ fmt.Formatter        = nil
	_                      = errors.ErrUnsupported
)
var (
	ErrInvalidArgument = &customErrorDef{
		code: 6000,
		msg:  "Invalid argumen",
		name: "InvalidArgument",
	}
	ErrInvalidTokenAccount = &customErrorDef{
		code: 6001,
		msg:  "Invalid token account",
		name: "InvalidTokenAccount",
	}
	ErrUnauthorizedUser = &customErrorDef{
		code: 6002,
		msg:  "unauthorized user",
		name: "UnauthorizedUser",
	}
	ErrControllerAlreadyExist = &customErrorDef{
		code: 6003,
		msg:  "Controller already exist",
		name: "ControllerAlreadyExist",
	}
	ErrTooManyControllers = &customErrorDef{
		code: 6004,
		msg:  "Too many controller accounts",
		name: "TooManyControllers",
	}
	ErrControllerNotExist = &customErrorDef{
		code: 6005,
		msg:  "Controller not exist",
		name: "ControllerNotExist",
	}
	ErrDeviceStaked = &customErrorDef{
		code: 6006,
		msg:  "Device staked",
		name: "DeviceStaked",
	}
	ErrSpecIDMismatch = &customErrorDef{
		code: 6007,
		msg:  "SpecId mismatch",
		name: "SpecIDMismatch",
	}
	ErrInsufficientFunds = &customErrorDef{
		code: 6008,
		msg:  "Insufficient funds",
		name: "InsufficientFunds",
	}
	ErrTooMuchReleasableAssets = &customErrorDef{
		code: 6009,
		msg:  "Too much releasable assets",
		name: "TooMuchReleasableAssets",
	}
	Errors = map[int]CustomError{
		6000: ErrInvalidArgument,
		6001: ErrInvalidTokenAccount,
		6002: ErrUnauthorizedUser,
		6003: ErrControllerAlreadyExist,
		6004: ErrTooManyControllers,
		6005: ErrControllerNotExist,
		6006: ErrDeviceStaked,
		6007: ErrSpecIDMismatch,
		6008: ErrInsufficientFunds,
		6009: ErrTooMuchReleasableAssets,
	}
)

type CustomError interface {
	Code() int
	Name() string
	Error() string
}

type customErrorDef struct {
	code int
	name string
	msg  string
}

func (e *customErrorDef) Code() int {
	return e.code
}

func (e *customErrorDef) Name() string {
	return e.name
}

func (e *customErrorDef) Error() string {
	return fmt.Sprintf("%s(%d): %s", e.name, e.code, e.msg)
}

func DecodeCustomError(rpcErr error) (err error, ok bool) {
	if errCode, o := decodeErrorCode(rpcErr); o {
		if customErr, o := Errors[errCode]; o {
			err = customErr
			ok = true
			return
		}
	}
	return
}

func decodeErrorCode(rpcErr error) (errorCode int, ok bool) {
	var jErr *ag_jsonrpc.RPCError
	if errors.As(rpcErr, &jErr) && jErr.Data != nil {
		if root, o := jErr.Data.(map[string]interface{}); o {
			if rootErr, o := root["err"].(map[string]interface{}); o {
				if rootErrInstructionError, o := rootErr["InstructionError"]; o {
					if rootErrInstructionErrorItems, o := rootErrInstructionError.([]interface{}); o {
						if len(rootErrInstructionErrorItems) == 2 {
							if v, o := rootErrInstructionErrorItems[1].(map[string]interface{}); o {
								if v2, o := v["Custom"].(json.Number); o {
									if code, err := v2.Int64(); err == nil {
										ok = true
										errorCode = int(code)
									}
								} else if v2, o := v["Custom"].(float64); o {
									ok = true
									errorCode = int(v2)
								}
							}
						}
					}
				}
			}
		}
	}
	return
}
